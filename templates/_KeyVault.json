{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
     "keyVaultName": {
      "type": "string",
      "defaultValue": "krassykeyvault2"
    },  
    "keyName": {
      "type": "string",
      "defaultValue": "KrassyEncryptKey2"
    }, 
    "DiskEncryptSetName": {
      "type": "string",
      "defaultValue": "KrassyEncryptSet2"
    }, 
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    }
    },
    "functions": [],
    "variables": {},
    "resources": [
{
    // creating the key vault
    "type": "Microsoft.KeyVault/vaults",
    "apiVersion": "2019-09-01",
    "name": "[parameters('keyvaultName')]",
    "location": "[parameters('location')]",
    "properties": {
        "enableRbacAuthorization": false,
        "enableSoftDelete": true,
        // "enablePurgeProtection": false,
        "enabledForDeployment": true,
        "enabledForDiskEncryption": true,
        "enabledForTemplateDeployment": true,
        "tenantId": "[subscription().tenantId]",
        "accessPolicies": [
            // leaving this blank as I'll create this later once the diskencset is ready
        ],
        "sku": {
            "name": "standard",
            "family": "A"
        },
        "networkAcls": {
            "defaultAction": "Allow",
            "bypass": "AzureServices"
        }
    }
},
{
    // creating a key to the vault
    "type": "Microsoft.KeyVault/vaults/keys",
    "apiVersion": "2019-09-01",
    // note the name: has to include the key vault
    "name": "[concat(parameters('keyvaultName'), '/', parameters('keyName'))]",
    "location": "[parameters('location')]",
    "dependsOn": [
        // I set the vault as a dependency so the vault gets created first
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
    ],
    "properties": {
        "kty": "RSA",
        "keySize": 2048
    }
},
{
    // creating the disk encryption set
    "type": "Microsoft.Compute/diskEncryptionSets",
    "apiVersion": "2019-07-01",
    "name": "[parameters('DiskEncryptSetName')]",
    "location": "[parameters('location')]",
    "dependsOn": [
        // this depends on the key existing
        "[resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyvaultName'), parameters('keyName'))]"
    ],
    "identity": {
        "type": "SystemAssigned"
    },
    "properties": {
        // since I know the key and vault exists, I can refer to them via the reference() and referenceId() functions below
        "activeKey": {
            "sourceVault": {
                "id": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
            },
            // I found the API from the key API
            "keyUrl": "[reference(resourceId('Microsoft.KeyVault/vaults/keys', parameters('keyvaultName'), parameters('keyName')), '2019-09-01', 'Full').properties.keyUriWithVersion]"
        }
    }
},
{
    // now I define the access policies to the key vault
    "type": "Microsoft.KeyVault/vaults/accessPolicies",
    "apiVersion": "2019-09-01",
    "name": "[concat(parameters('keyvaultName'), '/add')]",
    "dependsOn": [
        "[resourceId('Microsoft.Compute/diskEncryptionSets', parameters('DiskEncryptSetName'))]"
    ],
    "properties": {
        "accessPolicies": [
            {
                "tenantId": "[subscription().tenantId]",
                // again, thanks to the reference() function I can get the principal id of the disk encryption set! 
                "objectId": "[reference(resourceId('Microsoft.Compute/diskEncryptionSets', parameters('DiskEncryptSetName')), '2019-07-01', 'Full').identity.PrincipalId]",
                "permissions": {
                    "keys": [
                        "Get",
                        "WrapKey",
                        "UnwrapKey"
                    ],
                    "secrets": [],
                    "certificates": []
                }
            }
        ]
    }
}
    ],
    "outputs": {}
}